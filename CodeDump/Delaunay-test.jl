using DelaunayTriangulation
using GLMakie
points = [
    [-0.802402675151825, 2.5358452796936035, -0.02314559929072857],
[0.8483500480651855, 2.873291492462158, -0.00996352918446064],
[0.5400505661964417, 4.262057781219482, -0.02566363476216793],
[-0.802402675151825, 2.5358452796936035, -0.02314559929072857],
[0.5400505661964417, 4.262057781219482, -0.02566363476216793],
[-0.856687068939209, 3.6801249980926514, -0.034114498645067215],
[-0.802402675151825, 2.5358452796936035, -0.02314559929072857],
[-0.6257779002189636, 1.1334083080291748, -0.008617893792688847],
[0.6764183044433594, 1.3961735963821411, 0.0018119403393939137],
[-0.802402675151825, 2.5358452796936035, -0.02314559929072857],
[0.6764183044433594, 1.3961735963821411, 0.0018119403393939137],
[0.8483500480651855, 2.873291492462158, -0.00996352918446064],
[-0.6257779002189636, 1.1334083080291748, -0.008617893792688847],
[-0.2931426763534546, 0.3494853377342224, 0.0018067096825689077],
[0.4398219883441925, 0.4411933720111847, 0.008189097046852112],
[-0.6257779002189636, 1.1334083080291748, -0.008617893792688847],
[0.4398219883441925, 0.4411933720111847, 0.008189097046852112],
[0.6764183044433594, 1.3961735963821411, 0.0018119403393939137],
[-0.2931426763534546, 0.3494853377342224, 0.0018067096825689077],
[-0.24887385964393616, -0.06209585443139076, 0.005995036568492651],
[0.22672133147716522, -0.009848121553659439, 0.010203640908002853],
[-0.2931426763534546, 0.3494853377342224, 0.0018067096825689077],
[0.22672133147716522, -0.009848121553659439, 0.010203640908002853],
[0.4398219883441925, 0.4411933720111847, 0.008189097046852112],
[0.5400505661964417, 4.262057781219482, -0.02566363476216793],
[0.13812269270420074, 5.484524726867676, -0.040769219398498535],
[-1.2704967260360718, 5.490444660186768, -0.054697435349226],
[0.5400505661964417, 4.262057781219482, -0.02566363476216793],
[-1.2704967260360718, 5.490444660186768, -0.054697435349226],
[-0.856687068939209, 3.6801249980926514, -0.034114498645067215],
[0.13812269270420074, 5.484524726867676, -0.040769219398498535],
[-0.38931697607040405, 6.349171161651611, -0.053848449140787125],
[-1.074474811553955, 6.596484661102295, -0.06285202503204346],
[0.13812269270420074, 5.484524726867676, -0.040769219398498535],
[-1.074474811553955, 6.596484661102295, -0.06285202503204346],
[-1.2704967260360718, 5.490444660186768, -0.054697435349226],
]



tri1 = triangulate(points) # default predicate kernel is AdaptiveKernel()

# Voronoi example 
vorn2 = voronoi(tri1)

# Clipped Voronoi 
vorn3 = voronoi(tri1, clip=true, predicates = ExactKernel())

# Smoothed Voronoi 
vorn4 = centroidal_smooth(vorn3; predicates = FastKernel()) # or do voronoi(tri1, clip = true, smooth = true)
centroidal_smooth(voronoi(triangulate(points)); predicates = FastKernel())

vorn5 = centroidal_smooth(vorn4)

# Plotting 
fig = Figure()
ax = Axis(fig[1, 1]; title = "Centroidal Voronoi");            voronoiplot!(ax, vorn4)


fieldnames(typeof(vorn4))
vorn4.polygon_points




















#-----------------------



using LinearAlgebra

function find_linear_combination_weights(p::AbstractVector{<:Real}, p1::AbstractVector{Float64}, p2::AbstractVector{Float64}, p3::AbstractVector{Float64})
    # Ensure all input vectors are 3D
    @assert length(p) == 3 && length(p1) == 3 && length(p2) == 3 && length(p3) == 3 "All points must be 3D vectors"
    
    # Form the matrix A with p1, p2, p3 as columns
    A = hcat(p1, p2, p3)
    
    # Solve the linear system A * w = p for weights w
    try
        weights = A \ p
        return weights
    catch e
        error("The points are linearly dependent or the system is singular: $e")
    end
end

function get_transformation(points1, points2)
    @assert length(points1) == 3 && length(points2) == 3

    function f(p)
        # Find the linear combination weights
        weights = find_linear_combination_weights(p, points1...)
        return weights[1] * points2[1] + weights[2] * points2[2] + weights[3] * points2[3]
    end
    return f
end


f = get_transformation(
    [[0.0, 0.0, 0.0], [1.0, 0.0, 0.0], [0.0, 1.0, 0.0]],
    [[0.0, 0.0, 0.0], [1.0, 1.0, 1.0], [2.0, 1.0, 1.0]]
)

f([0.5, 0.5, 0.0]) # Should return a point in the transformed plane



# Test linear combination weights
weights = find_linear_combination_weights([0.5, 0.5, 0.0], [0.0, 0.0, 1.0], [1.0, 0.0, 0.0], [0.0, 1.0, 0.0])
